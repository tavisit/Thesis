float normalization_factor()
{
    return SUN_MASS_SIMPLIFIED * SUN_MASS_SIMPLIFIED;
}

float3 compute_acceleration(int current_index, float3 position, float mass, const __global float* globalData, int length, int offset){
    float3 totalForce = (float3)(0.0f, 0.0f, 0.0f);
    for (int j = 0; j < length; j++) {
        if (current_index != j) {
            float3 position_other = (float3)(globalData[j*offset], globalData[j*offset + 1], globalData[j*offset + 2]);
            float mass_other = globalData[j*offset+3];
            float3 diff = position_other - position;
            float distSquared = dot(diff, diff) + EPSILON;

            float forceMagnitude = G * mass * mass_other / distSquared;

            totalForce += normalize(diff) * forceMagnitude;
        }
    }
    return totalForce / mass * normalization_factor(); // kpc/(Myr^2)
}