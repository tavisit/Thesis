// For simulations with many bodies, consider more sophisticated 
// algorithms like Barnes-Hut, which reduce computational complexity at the cost of some accuracy.

// we care about:
// - position
// - mass

__kernel void universal_attraction_force(__global float3* acceleration, __global const float* flattenedData, int length, int offset)
{
    int current_index = get_global_id(0);

    float G = 6.67430e-11f;

    if (current_index < length) {
        float3 totalForce = (float3)(0.0f, 0.0f, 0.0f);
        float3 position = { flattenedData[current_index * offset], flattenedData[current_index * offset + 1], flattenedData[current_index * offset + 2] };
        float mass = flattenedData[current_index * offset+3];

        acceleration[current_index] = compute_acceleration(current_index, position, mass, flattenedData, length, offset);
    }
}